const TelegramBot = require('node-telegram-bot-api')
const mongoose = require('mongoose')

const config = require('./config')
const helper = require('./helper')
const cbd = require('./callbacks')
let kb = require('./keyboard-buttons-ru')
let lang

module.exports = {
    lang   
}

let keyboard = require('./keyboard')
let ikb = require('./inline-keyboard')
let texts = require('./texts-ru')


const PAYMENT_WALL_TEST = '361519591:TEST:5c1110cb8fd8c126b7cbc329a53b0afa'
const CLICK_TEST = '398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065'
const PAYCOM_TEST = '371317599:TEST:268932098'

mongoose.connect(config.DB_URL)
.then (() => {
      console.log('MogoDB Connected: ' + config.DB_URL)
})
.catch((e) => console.log(e))

require('./models/users.model')
require('./models/general.model')

const User = mongoose.model('users')
const Gen = mongoose.model('general')


var name = ''
var dep = 0
var nameFlag = false
var sellFlag = false
// ===========================================
const bot = new TelegramBot(config.TOKEN, {
    polling: true
})
helper.logStart()
setInterval(function(){
    var hm = new Date().getHours() + ':' + new Date().getMinutes()
    switch (hm) {
        case '0:30':
        case '1:30':
        case '2:30':
        case '3:30':
        case '4:30':
        case '5:30':
        case '6:30':
        case '7:30':
        case '8:30':
        case '9:30':
        case '10:30':
        case '11:30':
        case '12:30':
        case '13:30':
        case '14:30':
        case '15:30':
        case '16:30':
        case '17:30':
        case '18:30':
        case '19:30':
        case '20:30':
        case '21:30':
        case '22:30':
        case '23:30':
        User.find().then(users => {
        
        users.forEach(u => {
            Gen.findOne({_id: 1}).then(g => {
            // =============== Fruits ================
            const plantApple = u.plants.apple
            const plantPear = u.plants.pear
            const plantGrapes = u.plants.grapes
            const plantStrawberries = u.plants.strawberries
            const plantCherries = u.plants.cherries
            const plantPeach = u.plants.peach
        
            const producedApple =  (g.produces.one / 2) * plantApple
            const producedPear =  (g.produces.two / 2) * plantPear
            const producedGrapes =  (g.produces.three / 2) * plantGrapes
            const producedStrawberries =  (g.produces.four / 2) * plantStrawberries
            const producedCherries =  (g.produces.five / 2) * plantCherries
            const producedPeach =  (g.produces.six / 2) * plantPeach
                
            // =============== Vegetables ================
        
            const plantTomato = u.plants.tomato
            const plantEggplant = u.plants.eggplant
            const plantCarrots = u.plants.carrots
            const plantCorn = u.plants.corn
            const plantPepper = u.plants.pepper
            const plantPotatoes = u.plants.potatoes
                
            const producedTomato =  (g.produces.one / 2) * plantTomato
            const producedEggplant =  (g.produces.two / 2) * plantEggplant
            const producedCarrots =  (g.produces.three / 2) * plantCarrots
            const producedCorn =  (g.produces.four / 2) * plantCorn
            const producedPepper =  (g.produces.five / 2) * plantPepper
            const producedPotatoes =  (g.produces.six / 2) * plantPotatoes
                
            // =============== Buildings ================
            
            const buildChicken = u.buildings.chicken
            const buildPig = u.buildings.pig
            const buildSheepdog = u.buildings.sheepdog
            const buildCowshed = u.buildings.cowshed
            const buildHive = u.buildings.hive
            const buildTurkey = u.buildings.turkey
            
            const producedEggs = g.produces.one * buildChicken
            const producedBacon = g.produces.two * buildPig
            const producedWool = g.produces.three * buildSheepdog
            const producedMilk = g.produces.four * buildCowshed
            const producedHoney = g.produces.five * buildHive
            const producedLeg = g.produces.six * buildTurkey
            
            User.updateOne({_id: u._id}, { $inc: {
                "produced.apple": producedApple,
                "produced.pear": producedPear,
                "produced.grapes": producedGrapes,
                "produced.strawberries": producedStrawberries,
                "produced.cherries": producedCherries,
                "produced.peach": producedPeach,
                "produced.tomato": producedTomato,
                "produced.eggplant": producedEggplant,
                "produced.carrots": producedCarrots,
                "produced.corn": producedCorn,
                "produced.pepper": producedPepper,
                "produced.potatoes": producedPotatoes,
                "produced.eggs": producedEggs,
                "produced.bacon": producedBacon,
                "produced.wool": producedWool,
                "produced.milk": producedMilk,
                "produced.honey": producedHoney,
                "produced.leg": producedLeg
            }
            }).catch((e) => console.log(e))
                 
        })
        })
    }).catch((e) => console.log(e)) 
        break
    }
}, 60 * 1000)

bot.on('message', msg => {
    const chatId = helper.gCI(msg)
    
    switch (msg.text) {
        // ======= HOME ==========
            
        case kb.home.myFarm: case kb.back_farm:
            sendHTML(chatId, texts.myFarm, 'myFarm')
        break
        case kb.home.friends:
        break
        
        // ======= CITY =======
        case kb.home.city: case kb.back_city: case kb.cancel_dep:
            sendHTML(chatId, texts.city, 'city')
        break
        
        case kb.city.market:
            User.findOne({_id: chatId}).then(u => {
            const market = `üõí <b>–†—ã–Ω–æ–∫</b>\n
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫!
–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã —Å–æ —Å–∫–ª–∞–¥–∞.

üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ:
<b>${u.warehouse.fruit.apple + u.warehouse.fruit.pear + u.warehouse.fruit.grapes + u.warehouse.fruit.strawberries + u.warehouse.fruit.cherries + u.warehouse.fruit.peach + u.warehouse.vegetables.tomato + u.warehouse.vegetables.eggplant + u.warehouse.vegetables.carrots + u.warehouse.vegetables.corn + u.warehouse.vegetables.pepper + u.warehouse.vegetables.potatoes}</b> üå± –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–≥–æ
<b>${u.warehouse.products.eggs + u.warehouse.products.bacon + u.warehouse.products.wool + u.warehouse.products.milk + u.warehouse.products.honey + u.warehouse.products.leg}</b> ü•ö –ü—Ä–æ–¥—É–∫—Ç–æ–≤

–†–∞—Å—Ü–µ–Ω–∫–∏
<b>500</b> üå± –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ = 1 üí∞ Gold –∏ 2 üíµ –î–æ–ª–ª–∞—Ä–∞
<b>500</b> ü•ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ = 1 üíé Diamond –∏ 2 üí∂ –ï–≤—Ä–æ

–ú–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:
<i>500 üå±/ü•ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤</i>`
        
            sendHTMLi(chatId, market, 'market')
        })
        break
        case kb.city.bank:
            DisplayBank(chatId)
        break
        case kb.city.casino:
            sendHTML(chatId, texts.casino, 'casino')
        break
        
        case kb.city.townHall: case kb.no: case kb.cancel:
            sendHTML(chatId, texts.townHall, 'townHall')
        break
        case kb.townHall.name:
        User.findOne({_id: chatId}).then(u => {
            if (u.nameFarm == '') {
                const text = `üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã</b>\n
–í–∞—à–∞ —Ñ–µ—Ä–º–∞ –ø–æ–∫–∞ –Ω–∏–∫–∞–∫ –Ω–µ –Ω–∞–∑—ã–≤–µ—Ç—Å—è. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–¥—É–º–∞—Ç—å –¥–ª—è –Ω–µ–µ –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è—â–µ–µ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä.
\n–ù–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ñ–µ—Ä–º—ã - —ç—Ç–æ –µ—ë –ª–∏—Ü–æ. –ü–æ –Ω–µ–º—É –í–∞—Å —Å–º–æ–≥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –∏ –∏–º–µ–Ω–Ω–æ –æ–Ω–æ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ –≤–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.\n
‚úÖ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:
–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç:\nA-Z, a-z\n–¶–∏—Ñ—Ä—ã:\n0-9\n
–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–µ—Ä–º—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 4-—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–µ–Ω—å—à–µ 20-—Ç–∏.\n
‚ùóÔ∏è –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ–ª–æ–≥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞!`
            
            sendHTMLi(chatId, text, 'change')
            }
            else {
                const text = `üìù <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã</b>\n
–í–∞—à–∞ —Ñ–µ—Ä–º–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '<b>${u.nameFarm}</b>'.\n
‚úÖ –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤:
–õ–∞—Ç–∏–Ω—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç:\nA-Z, a-z\n–¶–∏—Ñ—Ä—ã:\n0-9\n
–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–µ—Ä–º—ã –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 4-—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–µ–Ω—å—à–µ 20-—Ç–∏.\n
‚ùóÔ∏è –ó–∞–ø—Ä–µ—â–µ–Ω–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ–ª–æ–≥–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞!`
            
            sendHTMLi(chatId, text, 'change')
            }
        
        })
        break
        
        case kb.townHall.statistics:
            getStat(chatId)
        break
        
        // ========== CASINO ==============
        case kb.casino.bonus:
            User.findOne({_id: chatId}).then(u => {
                
                const time = msg.date
                const utime = u.lastBonus
                
                if (utime != null) {
                    
                    const delta = new Date(time - utime).getHours()
                    
                    if (delta <= '18') {
                        getBonus(chatId, time)
                    }
                    else {
                        const error = `üïê –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è. –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.`
                        sendHTML(chatId, error)
                    }
                }
                else {
                    const iso = new Date(time * 1000)
                    getBonus(chatId, time)
                }
            })
        break
        // ========== MY FARM =============
        case kb.myFarm.plants:
            sendHTMLi(chatId, texts.plants, 'plants')
        break
        case kb.plants.fruit:
            DisplayFruit(chatId)
        break
        case kb.plants.vegetables:
            DisplayVegetables(chatId)
        break
        case kb.myFarm.buildings:
            DisplayBuildings(chatId)
        break
        
        case kb.myFarm.referals:
        User.findOne({_id: chatId}).then(u => {
        const text = `üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n 
–ó–∞ –∫–∞–∂–¥—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ, –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å <b>40</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤ –∏ <b>20</b> üí∂ –ï–≤—Ä–æ.
–¢–∞–∫–∂–µ, –∫–∞–∂–¥—ã–π, –∫—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –í–∞–º 30% —Å–≤–æ–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–æ —Å–±–æ—Ä–æ–≤.\n
–í—ã –ø—Ä–∏–≤–µ–ª–∏: <b>${u.referals.length}</b> —Ä–µ—Ñ–µ—Ä–∞–ª–∞(–æ–≤).\n
–°—Å—ã–ª–∫–∞:`
        const link = `https://t.me/FarmerGameBot?start=${u._id}`
        sendHTML(chatId, text)
        setTimeout(sendHTML, 300, chatId, link)
        })
        break
        
        // ======= OTHER =======
        case kb.home.other:
            sendHTML(chatId, texts.other, 'other')
        break
        case kb.other.tasks:
            User.findOne({_id: chatId}).then(u => {
                
                switch (u.successTasks) {
                    case 0: 
                    sendHTMLi(chatId, texts.tasks.task1, 'task1')
                    break
                    case 1: 
                    sendHTMLi(chatId, texts.tasks.task2, 'task2')
                    break
                    case 2: 
                    sendHTMLi(chatId, texts.tasks.task3, 'task3')
                    break
                    case 3: 
                    sendHTMLi(chatId, texts.tasks.task4, 'task4')
                    break
                    case 4: 
                    sendHTMLi(chatId, texts.tasks.task5, 'task5')
                    break
                    case 5: 
                    sendHTMLi(chatId, texts.tasks.task6, 'task6')
                    break
                    case 6: 
                    sendHTMLi(chatId, texts.tasks.task7, 'task7')
                    break
                    case 7: 
                    sendHTMLi(chatId, texts.tasks.task8, 'task8')
                    break
                    case 8: 
                    sendHTMLi(chatId, texts.tasks.task9, 'task9')
                    break
                    case 9: 
                    sendHTMLi(chatId, texts.tasks.task10, 'task10')
                    break
                    case 10: 
                    sendHTML(chatId, texts.tasks.no_task)
                    break
                }
                
            })
        break
        case kb.other.settings:
        break
        case kb.other.help:
            sendHTMLi(chatId, texts.help, 'help')
        break
        case kb.other.community:
            sendHTML(chatId, texts.community)
        break
        
        
        
        case kb.back: 
            sendHTML(chatId, texts.mainMenu, 'home')
        break
        case kb.yes: 
            if (nameFlag) {
            User.findOne({_id: chatId}).then(u => {

                User.updateOne({_id: u.landlord}, { $inc: {
                    "bank.dollars": 40,
                    "bank.euro": 20
                }}).catch((e) => console.log(e))

                User.updateOne({_id: chatId}, { $set: {
                    "nameFarm": name
                }
                }).catch((e) => console.log(e))

                const ref = `üë§ –ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª –ª–∏—Ü–µ–Ω–∑–∏—é —Ñ–µ—Ä–º–µ—Ä–∞, –µ–≥–æ —Ñ–µ—Ä–º–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è:\n<b>${name}</b>\n–¢–µ–ø–µ—Ä—å –í—ã —Å–¥–∞–µ—Ç–µ –≤ –∞—Ä–µ–Ω–¥—É 30% —É—á–∞—Å—Ç–∫–∞ —ç—Ç–æ–π —Ñ–µ—Ä–º—ã –∏ –í—ã —Ç–∞–∫ –∂–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞–≥—Ä–∞–¥—É:\n <b>40</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤ –∏ <b>20</b> üí∂ –ï–≤—Ä–æ.`
                
                sendHTML(u.landlord, ref)

            })
            }
            else {
                User.updateOne({_id: chatId}, { $set: {
                    "nameFarm": name
                }
                }).catch((e) => console.log(e))
            }

            User.findOne({_id: chatId}).then(u => {

            const success = `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –í–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è <b>'${name}'</b>`

            sendHTML(chatId, success, 'townHall')
            }) 
        break
    } 
})

bot.onText(/\/start/, msg => {
    const chatId = helper.gCI(msg)
    User.find({}).then(u => {
        var count = 0
        u.forEach(i => {
            count++
        })
        console.log(count)
    })
    User.findOne({_id: chatId}).then(u => {
        
        if (u != null) {
            sendHTML(chatId, texts.mainMenu, 'home')
        }
        else 
            if (u == null) {
            u = new User({
                _id: chatId,
                registerDate: new Date()
            })
        
            u.save()
                .catch((e) => console.log(e))
            
            sendHTMLi(chatId, texts.firstStarting, 'firstMessage')
            
        }
    })
    
})
bot.onText(/\/start (\d+)/, (msg, [, match]) => {
    const chatId = helper.gCI(msg)
    
    User.findOne({_id: chatId}).then(u => {
        
        if (u != null) {
            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${chatId} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        }
        else 
            if (u == null) {
            
            u = new User({
                _id: chatId,
                landlord: match,
                registerDate: new Date()
            })
                
            u.save().catch((e) => console.log('–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞'))
                
            if (chatId != match) {
                User.updateOne({_id: match}, {
                    $push: {
                        "referals": chatId
                    }
                }).catch(e => console.log('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞'))   
            }
            
            const text = `üåê <b>–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ –í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ</b>\n–ò–º—è –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: ${msg.from.first_name}\n<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–ª—É—á–∏—Ç –õ–∏—Ü–µ–Ω–∑–∏—é –§–µ—Ä–º–µ—Ä–∞.</i>`
            
            sendHTML(match, text)    
            
        }
    })
})
bot.onText(/\/menu/, msg => {
    sendHTML(helper.gCI(msg), texts.mainMenu, 'home')
})

bot.on('callback_query', query => {
    const {chat, message_id } = query.message
//    bot.answerCallbackQuery(query.id, `${query.data}`)
    switch (query.data) {
        // =========== BANK =============
        case cbd.deposit:
        const dep = `üí∏ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ –î–æ–ª–ª–∞—Ä–æ–≤.\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:\n<code>100 üíµ –î–æ–ª–ª–∞—Ä–æ–≤ = $1</code>\n–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–Ω–æ—Å - <b>300 üíµ –î–æ–ª–ª–∞—Ä–æ–≤</b> –∏–ª–∏ <b>$3</b>`
        
        bot.sendMessage(chat.id, dep, {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: keyboard.cancel_dep,
                resize_keyboard: true
            }
        }).then(() => {
            deposit(chat.id, query.id)
        })
        break
        case cbd.withdraw:
            
        break
        case cbd.exchange:
            
        break
        case cbd.redeem:
            redeem(chat.id, query.id)
        break
        
        
        
        
        case cbd.build:
            User.findOne({_id: chat.id}).then(u => {
                Gen.findOne({_id: 1}).then(g => {
                    
                const one = `üè´üêì –ö—É—Ä—è—Ç–Ω–∏–∫
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.one}</b> ü•ö –Ø–∏—Ü –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.one}</b> üí∂ –ï–≤—Ä–æ`
                const two = `üè´üêñ –°–≤–∏–Ω–∞—Ä–Ω–∏–∫
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.two}</b> ü•ì –ë–µ–∫–æ–Ω–∞ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.two}</b> üí∂ –ï–≤—Ä–æ`
                const three = `üè´üêë –û–≤—á–∞—Ä–Ω–∏–∫
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.three}</b> ‚òÅÔ∏è –®–µ—Ä—Å—Ç–∏ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.three}</b> üí∂ –ï–≤—Ä–æ`
                const four = `üè´üêÇ –ö–æ—Ä–æ–≤–Ω–∏–∫
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.four}</b> ü•õ –ú–æ–ª–æ–∫–∞ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.four}</b> üí∂ –ï–≤—Ä–æ`
                const five = `üè´üêù –£–ª–µ–π
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.five}</b> üçØ –ú—ë–¥–∞ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.five}</b> üí∂ –ï–≤—Ä–æ`
                const six = `üè´ü¶É –ò–Ω–¥—é—à–∞—Ç–Ω–∏–∫
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.six}</b> üçó –ù–æ–∂–µ–∫ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.six}</b> üí∂ –ï–≤—Ä–æ`

                setTimeout(sendHTMLi, 0, chat.id, one, 'buildChicken')

                setTimeout(sendHTMLi, 300, chat.id, two, 'buildPig')

                setTimeout(sendHTMLi, 600, chat.id, three, 'buildSheepdog')

                setTimeout(sendHTMLi, 900, chat.id, four, 'buildCowshed')

                setTimeout(sendHTMLi, 1200, chat.id, five, 'buildHive')

                setTimeout(sendHTMLi, 1500, chat.id, six, 'buildTurkey')
            
                })
            })
        break
        case cbd.send_buildings:
        sendProducts(chat.id, query.id, message_id)
        break
        case cbd.buy_fruit:
            User.findOne({_id: chat.id}).then(u => {
            Gen.findOne({_id: 1}).then(g => {
                const one = `üå±üçé –Ø–±–ª–æ–Ω—è
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.one / 2}</b> üçé –Ø–±–ª–æ–∫ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.one / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
                const two = `üå±üçê –ì—Ä—É—à–∞
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.two / 2}</b> üçê –ì—Ä—É—à –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.two / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
                const three = `üå±üçá –í–∏–Ω–æ–≥—Ä–∞–¥–Ω–∞—è –ª–æ–∑–∞
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.three / 2}</b> üçá –í–∏–Ω–æ–≥—Ä–∞–¥–∞ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.three / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
                const four = `üå±üçì –ö—É—Å—Ç –∫–ª—É–±–Ω–∏–∫–∏
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.four / 2}</b> üçì –ö–ª—É–±–Ω–∏–∫–∏ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.four / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
                const five = `üå±üçí –í–∏—à–Ω—è
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.five / 2}</b> üçí –í–∏—à–µ–Ω –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.five / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
                const six = `üå±üçë –ü–µ—Ä—Å–∏–∫
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.six / 2}</b> üçë –ü–µ—Ä—Å–∏–∫–æ–≤ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.six / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`

                setTimeout(sendHTMLi, 0, chat.id, one, 'buyApple')

                setTimeout(sendHTMLi, 300, chat.id, two, 'buyPear')

                setTimeout(sendHTMLi, 600, chat.id, three, 'buyGrapes')

                setTimeout(sendHTMLi, 900, chat.id, four, 'buyStrawberries')

                setTimeout(sendHTMLi, 1200, chat.id, five, 'buyCherries')

                setTimeout(sendHTMLi, 1500, chat.id, six, 'buyPeach')
                })
            })
        break
        case cbd.send_fruit:
            sendFruit(chat.id, query.id, message_id)
        break
        case cbd.buy_vegetables:
            User.findOne({_id: chat.id}).then(u => {
            Gen.findOne({_id: 1}).then(g => {
            const one = `üå±üçÖ –ö—É—Å—Ç —Ç–æ–º–∞—Ç–∞
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.one / 2}</b> üçÖ –¢–æ–º–∞—Ç–æ–≤ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.one / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
            const two = `üå±üçÜ –ö—É—Å—Ç –±–∞–∫–ª–∞–∂–∞–Ω–∞
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.two / 2}</b> üçÜ –ë–∞–∫–ª–∞–∂–∞–Ω–æ–≤ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.two / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
            const three = `üå±ü•ï –ú–æ—Ä–∫–æ–≤—å
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.three / 2}</b> ü•ï –ú–æ—Ä–∫–æ–≤–∏ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.three / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
            const four = `üå±üåΩ –ö—É–∫—É—Ä—É–∑–∞
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.four / 2}</b> üåΩ –ö—É–∫—É—Ä—É–∑—ã –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.four / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
            const five = `üå±üå∂ –ö—É—Å—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—Ü–∞
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.five / 2}</b> üå∂ –ö—Ä–∞—Å–Ω—ã—Ö –ø–µ—Ä—Ü–µ–≤ –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.five / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
            const six = `üå±ü•î –ö—É—Å—Ç –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è
–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <b>${g.produces.six / 2}</b> ü•î –ö–∞—Ä—Ç–æ—Ñ–µ–ª—è –≤ —á–∞—Å
–¶–µ–Ω–∞: <b>${g.prices.six / 2}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤`

            setTimeout(sendHTMLi, 0, chat.id, one, 'buyTomato')

            setTimeout(sendHTMLi, 300, chat.id, two, 'buyEggplant')

            setTimeout(sendHTMLi, 600, chat.id, three, 'buyCarrots')

            setTimeout(sendHTMLi, 900, chat.id, four, 'buyCorn')

            setTimeout(sendHTMLi, 1200, chat.id, five, 'buyPepper')

            setTimeout(sendHTMLi, 1500, chat.id, six, 'buyPotatoes')
                })
            })
        break
        case cbd.send_vegetables:
            sendVegetables(chat.id, query.id, message_id)
        break
        case cbd.sell_plants:
            sell(chat.id, query.id)
        break
        case cbd.sell_products:
            sell(chat.id, query.id, false)
        break
        
        case cbd.fruit: case cbd.back_f:
            DisplayFruit(chat.id, message_id)
        break
        case cbd.vegetables: case cbd.back_v:
            DisplayVegetables(chat.id, message_id)
        break
        case cbd.back_plants: 
            editText(texts.plants, chat.id, message_id, 'plants')
        break
        
        case cbd.next_step:
            editText(texts.step2, chat.id, message_id, 'step2')
        break
        case cbd.step3: 
            editText(texts.step3, chat.id, message_id, 'step3')
        break
        case cbd.step4: 
            editText(texts.step4, chat.id, message_id, 'step4')
        break
        
        case cbd.step5:
            editText(texts.step5, chat.id, message_id, 'step5')
        break
        case cbd.skip: case cbd.finish:
            sendHTML(chat.id, texts.skip, 'home')
        break
        
        
        case cbd.buildChicken:
            Build(chat.id, 100, 'chicken', query.id)
        break
        case cbd.buildPig:
            Build(chat.id, 1000, 'pig', query.id)
        break
        case cbd.buildSheepdog:
            Build(chat.id, 6000, 'sheepdog', query.id)
        break
        case cbd.buildCowshed:
            Build(chat.id, 18000, 'cowshed', query.id)
        break
        case cbd.buildHive:
            Build(chat.id, 45000, 'hive', query.id)
        break
        case cbd.buildTurkey:
            Build(chat.id, 90000, 'turkey', query.id)
        break
        
        case cbd.buyApple:
            BuyPlants(chat.id, 100 / 2, 'apple', query.id)
        break
        case cbd.buyPear:
            BuyPlants(chat.id, 1000 / 2, 'pear', query.id)
        break
        case cbd.buyGrapes:
            BuyPlants(chat.id, 6000 / 2, 'grapes', query.id)
        break
        case cbd.buyStrawberries:
            BuyPlants(chat.id, 18000 / 2, 'strawberries', query.id)
        break
        case cbd.buyCherries:
            BuyPlants(chat.id, 45000 / 2, 'cherries', query.id)
        break
        case cbd.buyPeach:
            BuyPlants(chat.id, 90000 / 2, 'peach', query.id)
        break
        // =========== VEGETABLES ============
        
        case cbd.buyTomato:
            BuyPlants(chat.id, 100 / 2, 'tomato', query.id)
        break
        case cbd.buyEggplant:
            BuyPlants(chat.id, 1000 / 2, 'eggplant', query.id)
        break
        case cbd.buyCarrots:
            BuyPlants(chat.id, 6000 / 2, 'carrots', query.id)
        break
        case cbd.buyCorn:
            BuyPlants(chat.id, 18000 / 2, 'corn', query.id)
        break
        case cbd.buyPepper:
            BuyPlants(chat.id, 45000 / 2, 'pepper', query.id)
        break
        case cbd.buyPotatoes:
            BuyPlants(chat.id, 90000 / 2, 'potatoes', query.id)
        break
        
        case cbd.changeName: 
            
        const change = `üìù <b>–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π —Ñ–µ—Ä–º—ã.`
        
        bot.sendMessage(chat.id, change, {
            parse_mode: 'HTML',
            reply_markup: {
                keyboard: keyboard.cancel,
                resize_keyboard: true
            }
        }).then(() => {
            changeName(chat.id)
        })
        break
        
        // ========== HELP ===============
        case cbd.training:
            sendHTMLi(chat.id, texts.firstStarting, 'firstMessage')
        break
        
        
        // ========== TASKS ==============
        case cbd.check1: 
            checkTask(chat.id, 1, query.id)
        break
        case cbd.check2: 
            checkTask(chat.id, 2, query.id)
        break
        case cbd.check3: 
            checkTask(chat.id, 3, query.id)
        break
        case cbd.check4: 
            checkTask(chat.id, 4, query.id)
        break
        case cbd.check5: 
            checkTask(chat.id, 5, query.id)
        break
        case cbd.check6: 
            checkTask(chat.id, 6, query.id)
        break
        case cbd.check7: 
            checkTask(chat.id, 7, query.id)
        break
    }
})

bot.onText(/\/setfruit (.+)/, (msg, [source, match]) => {
    const fruits = match.split(' ')
    const id = fruits[0]
    User.updateOne({_id: id}, { $set: {
        "warehouse.fruit.apple": fruits[1],
        "warehouse.fruit.pear": fruits[2],
        "warehouse.fruit.grapes": fruits[3],
        "warehouse.fruit.strawberries": fruits[4],
        "warehouse.fruit.cherries": fruits[5],
        "warehouse.fruit.peach": fruits[6]
            }
        }).catch((e) => console.log(e))
})
bot.onText(/\/setvegetables (.+)/, (msg, [source, match]) => {
    const vegetables = match.split(' ')
    const id = vegetables[0]
    User.updateOne({_id: id}, { $set: {
        "warehouse.vegetables.tomato": vegetables[1],
        "warehouse.vegetables.eggplant": vegetables[2],
        "warehouse.vegetables.carrots": vegetables[3],
        "warehouse.vegetables.corn": vegetables[4],
        "warehouse.vegetables.pepper": vegetables[5],
        "warehouse.vegetables.potatoes": vegetables[6]
        }
    }).catch((e) => console.log(e))
})
bot.onText(/\/setproducts (.+)/, (msg, [source, match]) => {
    const prod = match.split(' ')
    const id = prod[0]
    User.updateOne({_id: id}, { $set: {
        "warehouse.products.eggs": prod[1],
        "warehouse.products.bacon": prod[2],
        "warehouse.products.wool": prod[3],
        "warehouse.products.milk": prod[4],
        "warehouse.products.honey": prod[5],
        "warehouse.products.leg": prod[6]
        }
    }).catch((e) => console.log(e))
})
bot.onText(/\/setbalance (.+)/, (msg, [source, match]) => {
    const bal = match.split(' ')
    const id = bal[0]
    User.updateOne({_id: id}, { $set: {
        "bank.dollars": bal[1],
        "bank.euro": bal[2],
        "bank.gold": bal[3],
        "bank.diamond": bal[4],
        "bank.points": bal[5],
        "bank.token": bal[6]
        }
    }).catch((e) => console.log(e))
})
bot.onText(/\/setbuild (.+)/, (msg, [source, match]) => {
    const buil = match.split(' ')
    const id = buil[0]
    User.updateOne({_id: id}, { $set: {
        "buildings.chicken": buil[1],
        "buildings.pig": buil[2],
        "buildings.sheepdog": buil[3],
        "buildings.cowshed": buil[4],
        "buildings.hive": buil[5],
        "buildings.turkey": buil[6]
        }
    }).catch((e) => console.log(e))
})
bot.onText(/\/info/, msg => {
    User.findOne({_id: msg.chat.id}).then(u => {
        sendHTML(msg.chat.id, u._id)
        console.log(u._id)
    })
})
bot.onText(/\/clear (\d+)/, (msg, [, match]) => {
    User.updateOne({_id: match}, {$set: {
        "buildings.chicken": 0,
        "buildings.pig": 0,
        "buildings.sheepdog": 0,
        "buildings.cowshed": 0,
        "buildings.hive": 0,
        "buildings.turkey": 0,
        "bank.dollars": 0,
        "bank.euro": 0,
        "bank.gold": 0,
        "bank.diamond": 0,
        "bank.points": 0,
        "bank.token": 0,
        "warehouse.products.eggs": 0,
        "warehouse.products.bacon": 0,
        "warehouse.products.wool": 0,
        "warehouse.products.milk": 0,
        "warehouse.products.honey": 0,
        "warehouse.products.leg": 0,
        "warehouse.vegetables.tomato": 0,
        "warehouse.vegetables.eggplant": 0,
        "warehouse.vegetables.carrots": 0,
        "warehouse.vegetables.corn": 0,
        "warehouse.vegetables.pepper": 0,
        "warehouse.vegetables.potatoes": 0,
        "warehouse.fruit.apple": 0,
        "warehouse.fruit.pear": 0,
        "warehouse.fruit.grapes": 0,
        "warehouse.fruit.strawberries": 0,
        "warehouse.fruit.cherries": 0,
        "warehouse.fruit.peach": 0,
        "lastBonus": '',
        "landlord": ''
    }})
})
bot.onText(/\/admins/, msg => {
    const chatId = helper.gCI(msg)
    const text = `/setfruit - —É—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ—Ä—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ\n/setvegetables - —É—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–≤–æ—â–µ–π –Ω–∞ —Å–∫–ª–∞–¥–µ\n/setproducts - —É—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ\n/setbalance - —É—Å—Ç–∞–Ω–∞–ª–∏–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –≤ –±–∞–Ω–∫–µ\n/info - ID\n/setbuild - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç—Ä–æ–µ–∫\n/clear - –æ—á–∏—â–∞–µ—Ç –≤—Å—ë —É ID\n\n/clear ${chatId}\n\n/setfruit ${chatId} 128 256 0 0 0 0\n/setvegetables ${chatId} 128 256 0 0 0 0\n/setproducts ${chatId} 128 256 0 0 0 0\n/setbalance ${chatId} 10000 3000 0 0 0 0\n\n/setbuild ${chatId} 2 2 0 0 0 0`
    
    sendHTML(chatId, text)
})

function DisplayBank (Id) {
    
    User.findOne({_id: Id}).then(u => {
        
        const bank =  `üè¶ <b>–ë–∞–Ω–∫</b>\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–∫!\n–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å, –æ–±–º–µ–Ω—è—Ç—å, –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–ª—é—Ç—É –∏ –≤—ã–∫—É–ø–∏—Ç—å —Å–≤–æ–π —É—á–∞—Å—Ç–æ–∫.\n\n–í–∞—à —Å—á–µ—Ç:
<b>${u.bank.dollars}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤
<b>${u.bank.euro}</b> üí∂ –ï–≤—Ä–æ
<b>${u.bank.gold}</b> üí∞ Gold
<b>${u.bank.diamond}</b> üíé Diamond
<b>${u.bank.points}</b> ‚öúÔ∏è –ë–∞–ª–ª—ã
<b>${u.bank.token}</b> üí† –¢–æ–∫–µ–Ω—ã`
        
        if (u.landlord == '') {
            sendHTMLi(Id, bank, 'bank_w')
        } else {
            sendHTMLi(Id, bank, 'bank')
        }
        
    })
}
function DisplayFruit(chatId, mId) {
    User.findOne({_id: chatId}).then(u => {
        const fruit = `–í–∞—à–∏ —Ñ—Ä—É–∫—Ç—ã:
üå±üçé –Ø–±–ª–æ–Ω—è
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.apple}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.apple}</b> üçé
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.fruit.apple}</b> üçé\n
üå±üçê –ì—Ä—É—à–∞
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.pear}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.pear}</b> üçê 
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.fruit.pear}</b> üçê\n
üå±üçá –í–∏–Ω–æ–≥—Ä–∞–¥–Ω–∞—è –ª–æ–∑–∞
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.grapes}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.grapes}</b> üçá
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.fruit.grapes}</b> üçá\n
üå±üçì –ö—É—Å—Ç –∫–ª—É–±–Ω–∏–∫–∏
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.strawberries}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.strawberries}</b> üçì
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.fruit.strawberries}</b> üçì\n
üå±üçí –í–∏—à–Ω—è
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.cherries}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.cherries}</b> üçí
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.fruit.cherries}</b> üçí\n
üå±üçë –ü–µ—Ä—Å–∏–∫
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.peach}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.peach}</b> üçë
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.fruit.peach}</b> üçë`
    
        editText(fruit, chatId, mId, 'fruit')  
        
    })
}
function DisplayVegetables(chatId, mId) {
    User.findOne({_id: chatId}).then(u => {
        
        const vegetables =  `–í–∞—à–∏ –æ–≤–æ—â–∏:
üå±üçÖ –ö—É—Å—Ç —Ç–æ–º–∞—Ç–∞
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.tomato}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.tomato}</b> üçÖ
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.vegetables.tomato}</b> üçÖ

üå±üçÜ –ö—É—Å—Ç –±–∞–∫–ª–∞–∂–∞–Ω–∞
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.eggplant}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.eggplant}</b> üçÜ
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.vegetables.eggplant}</b> üçÜ

üå±ü•ï –ú–æ—Ä–∫–æ–≤—å
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.carrots}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.carrots}</b> ü•ï
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.vegetables.carrots}</b> ü•ï

üå±üåΩ –ö—É–∫—É—Ä—É–∑–∞
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.corn}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.corn}</b> üåΩ
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.vegetables.corn}</b> üåΩ

üå±üå∂ –ö—É—Å—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—Ü–∞
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.pepper}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.pepper}</b> üå∂
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.vegetables.pepper}</b> üå∂

üå±ü•î –ö—É—Å—Ç –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.plants.potatoes}</b>
–í—ã—Ä–æ—Å–ª–æ: <b>${u.produced.potatoes}</b> ü•î
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.vegetables.potatoes}</b> ü•î`
    
//        sendHTMLi(u._id, vegetables, 'vegetables')
        editText(vegetables, chatId, mId, 'vegetables')  
        
    })
}
function DisplayProducts(chatId) {
    User.findOne({_id: chatId}).then(u => {
        const products =  ``
        
        sendHTMLi(u._id, products, 'products')
        
    })
}
function DisplayBuildings(chatId) {
    User.findOne({_id: chatId}).then(u => {
        const buildings =  `üè´ <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∏</b>
  
–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—Å—Ç—Ä–æ–π–∫–∏. –ü–æ—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—è—Ç—Å—è –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –í—ã –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–∫–ª–∞–¥ –∏ –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ —Ä—ã–Ω–∫–µ –∑–∞ üí∂ –ï–≤—Ä–æ –∏ üíé Diamond, –∫–æ—Ç–æ—Ä—ã–µ –≤ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏–∏–∏ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏!

–í–∞—à–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:
üè´üêì –ö—É—Ä—è—Ç–Ω–∏–∫
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.buildings.chicken}</b>
–î–æ–±—ã—Ç–æ: <b>${u.produced.eggs}</b> ü•ö –Ø–∏—Ü
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.products.eggs}</b> ü•ö –Ø–∏—Ü

üè´üêñ –°–≤–∏–Ω–∞—Ä–Ω–∏–∫
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.buildings.pig}</b>
–î–æ–±—ã—Ç–æ: <b>${u.produced.bacon}</b> ü•ì –ë–µ–∫–æ–Ω–∞
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.products.bacon}</b> ü•ì –ë–µ–∫–æ–Ω–∞

üè´üêë –û–≤—á–∞—Ä–Ω–∏–∫
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.buildings.sheepdog}</b>
–î–æ–±—ã—Ç–æ: <b>${u.produced.wool}</b> ‚òÅÔ∏è –®–µ—Ä—Å—Ç–∏
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.products.wool}</b> ‚òÅÔ∏è –®–µ—Ä—Å—Ç–∏

üè´üêÇ –ö–æ—Ä–æ–≤–Ω–∏–∫
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.buildings.cowshed}</b>
–î–æ–±—ã—Ç–æ: <b>${u.produced.milk}</b> ü•õ –ú–æ–ª–æ–∫–∞
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.products.milk}</b> ü•õ –ú–æ–ª–æ–∫–∞

üè´üêù –£–ª–µ–π
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.buildings.hive}</b>
–î–æ–±—ã—Ç–æ: <b>${u.produced.honey}</b> üçØ –ú—ë–¥–∞
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.products.honey}</b> üçØ –ú—ë–¥–∞

üè´ü¶É –ò–Ω–¥—é—à–∞—Ç–Ω–∏–∫
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>${u.buildings.turkey}</b>
–î–æ–±—ã—Ç–æ: <b>${u.produced.leg}</b> üçó –ù–æ–∂–µ–∫
–ù–∞ —Å–∫–ª–∞–¥–µ: <b>${u.warehouse.products.leg}</b> üçó –ù–æ–∂–µ–∫

<i>–í—ã –æ—Ç–¥–∞–µ—Ç–µ 30% –≤—Å–µ–π –¥–æ–±—ã–≤–∞–µ–º—ã—Ö –í–∞–º–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤–∞—à–µ–º—É –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—é.</i>`
    
        sendHTMLi(u._id, buildings, 'buildings')
        
    })
}


function DisplayWarehouse(chatId) {
    User.findOne({_id: chatId}).then(u => {
        const warehouse =  `üì¶ <b>–°–∫–ª–∞–¥</b>\n–£ –≤–∞—Å –Ω–∞ —Å–∫–ª–∞–¥–µ:\n
<b>${u.warehouse.fruit.apple + u.warehouse.fruit.pear + u.warehouse.fruit.grapes + u.warehouse.fruit.strawberries + u.warehouse.fruit.cherries + u.warehouse.fruit.peach}</b> üçé –§—Ä—É–∫—Ç–æ–≤
<b>${u.warehouse.vegetables.tomato + u.warehouse.vegetables.eggplant + u.warehouse.vegetables.carrots + u.warehouse.vegetables.corn + u.warehouse.vegetables.pepper + u.warehouse.vegetables.potatoes}</b> üåΩ –û–≤–æ—â–µ–π
<b>${u.warehouse.products.eggs + u.warehouse.products.bacon + u.warehouse.products.wool + u.warehouse.products.milk + u.warehouse.products.honey + u.warehouse.products.leg}</b> ü•ö –ü—Ä–æ–¥—É–∫—Ç–æ–≤
\n–†–µ—Å—É—Ä—Å—ã —Å–æ —Å–∫–ª–∞–¥–∞ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ üõí <b>–†—ã–Ω–∫–µ</b>`
    
        sendHTMLi(u._id, warehouse, 'warehouse')
        
    })
}

function sendHTML(chatId, html, kbName = null) {
    
    const options = {
        parse_mode: 'HTML'
    }
    
    if (kbName) {
        options['reply_markup'] = {
            keyboard: keyboard[kbName],
            resize_keyboard: true
        }
    }
    
    bot.sendMessage(chatId, html, options)
    
}
function sendHTMLi(chatId, html, ikbName = null) {
    const options = {
        parse_mode: 'HTML'
    }
    
    if (ikbName) {
        options['reply_markup'] = {
            inline_keyboard: ikb[ikbName]
        }
    }
    
    bot.sendMessage(chatId, html, options)
}
function editText(text, chatId, messageId, ikbName = null) {
    
    const options = {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: 'HTML'
    }
    
    if (ikbName) {
        options['reply_markup'] = {
            inline_keyboard: ikb[ikbName]
        }
    }
    
    bot.editMessageText(text, options)
}

function BuyPlants(chatId, price, plant, queryId) {
    User.findOne({_id: chatId}).then(u => {
        Gen.findOne({_id: 1}).then(g => {
        if (u.bank.dollars >= price) {
    
            if (plant == 'apple'){ 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.apple": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üçé –Ø–±–ª–æ–Ω—è\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text) 
            } 
            
            else if(plant == 'pear') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.pear": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üçê –ì—Ä—É—à–∞\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)    
            } 
            
            else if (plant == 'grapes') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.grapes": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üçá –í–∏–Ω–æ–≥—Ä–∞–¥–Ω–∞—è –ª–æ–∑–∞\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)    
            } 
            
            else if (plant == 'strawberries') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.strawberries": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üçì –ö—É—Å—Ç –∫–ª—É–±–Ω–∏–∫–∏\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)  
            } 
            
            else if (plant == 'cherries') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.cherries": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üçí –í–∏—à–Ω—è\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)    
            } 
            
            else if (plant == 'peach') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.peach": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üçë –ü–µ—Ä—Å–∏–∫\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)    
            }
            
            // ======= VEGETABLES ===========
            
            else if (plant == 'tomato') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.tomato": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üçÖ –ö—É—Å—Ç —Ç–æ–º–∞—Ç–∞\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)       
            } 
            
            else if (plant == 'eggplant') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.eggplant": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üçÜ –ö—É—Å—Ç –±–∞–∫–ª–∞–∂–∞–Ω–∞\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)    
            } 
            
            else if (plant == 'carrots') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.carrots": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±ü•ï –ú–æ—Ä–∫–æ–≤—å\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)    
            }
            
            
            else if (plant == 'corn') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.corn": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üåΩ –ö—É–∫—É—Ä—É–∑–∞\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)    
            }
            
            
            else if (plant == 'pepper') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.pepper": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±üå∂ –ö—É—Å—Ç –∫—Ä–∞—Å–Ω–æ–≥–æ –ø–µ—Ä—Ü–∞\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text)    
            }
            
            
            else if (plant == 'potatoes') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "plants.potatoes": 1,
                    "bank.dollars": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ–∫—É–ø–∫–∞</b>\nüå±ü•î –ö—É—Å—Ç –∫–∞—Ä—Ç–æ—Ñ–µ–ª—è\n‚ûñ${price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n–ë–∞–ª–∞–Ω—Å: ${u.bank.dollars - price} –î–æ–ª–ª–∞—Ä–æ–≤`
                sendHTML(chatId, text) 
            }    
    } else {
        const error = `üö´ –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üíµ –î–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è!\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${u.bank.dollars} üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
        bot.answerCallbackQuery(queryId, error, true)
    }
    })
}).catch((e) => console.log(e))   
}
function Build(chatId, price, build, queryId) {
    User.findOne({_id: chatId}).then(u => {
        Gen.findOne({_id: 1}).then(g => {
            
        if (u.bank.euro >= price) {
    
            if (build == 'chicken'){ 
                User.updateOne({_id: u._id}, { $inc: {
                    "buildings.chicken": 1,
                    "bank.euro": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞</b>\nüè´üêì –ö—É—Ä—è—Ç–Ω–∏–∫\n‚ûñ${g.prices.one} üí∂ –ï–≤—Ä–æ\n–ë–∞–ª–∞–Ω—Å: ${u.bank.euro - g.prices.one} –ï–≤—Ä–æ`
                sendHTML(chatId, text) 
            } 
            
            else if(build == 'pig') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "buildings.pig": 1,
                    "bank.euro": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞</b>\nüè´üêñ –°–≤–∏–Ω–∞—Ä–Ω–∏–∫\n‚ûñ${g.prices.two} üí∂ –ï–≤—Ä–æ\n–ë–∞–ª–∞–Ω—Å: ${u.bank.euro - g.prices.two} –ï–≤—Ä–æ`
                sendHTML(chatId, text)     
            } 
            
            else if (build == 'sheepdog') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "buildings.sheepdog": 1,
                    "bank.euro": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞</b>\nüè´üêë –û–≤—á–∞—Ä–Ω–∏–∫\n‚ûñ${g.prices.three} üí∂ –ï–≤—Ä–æ\n–ë–∞–ª–∞–Ω—Å: ${u.bank.euro - g.prices.three} –ï–≤—Ä–æ`
                sendHTML(chatId, text)     
            } 
            
            else if (build == 'cowshed') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "buildings.cowshed": 1,
                    "bank.euro": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞</b>\nüè´üêÇ –ö–æ—Ä–æ–≤–Ω–∏–∫\n‚ûñ${g.prices.four} üí∂ –ï–≤—Ä–æ\n–ë–∞–ª–∞–Ω—Å: ${u.bank.euro - g.prices.four} –ï–≤—Ä–æ` 
                sendHTML(chatId, text)    
            } 
            
            else if (build == 'hive') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "buildings.hive": 1,
                    "bank.euro": -price
                }}).catch((e) => console.log(e))

                const text = `üõí <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞</b>\nüè´üêù –£–ª–µ–π\n‚ûñ${g.prices.five} üí∂ –ï–≤—Ä–æ\n–ë–∞–ª–∞–Ω—Å: ${u.bank.euro - g.prices.five} –ï–≤—Ä–æ`
                sendHTML(chatId, text)     
            } 
            
            else if (build == 'turkey') { 
                User.updateOne({_id: u._id}, { $inc: {
                    "buildings.turkey": 1,
                    "bank.euro": -price
                }}).catch((e) => console.log(e))
                const text = `üõí <b>–ü–æ—Å—Ç—Ä–æ–π–∫–∞</b>\nüè´ü¶É –ò–Ω–¥—é—à–∞—Ç–Ω–∏–∫\n‚ûñ${g.prices.six} üí∂ –ï–≤—Ä–æ\n–ë–∞–ª–∞–Ω—Å: ${u.bank.euro - g.prices.six} –ï–≤—Ä–æ`
                sendHTML(chatId, text)     
            }
    } else {
        const error = `üö´ –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç üí∂ –ï–≤—Ä–æ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–æ–≥–æ —Å—Ç—Ä–æ–µ–Ω–∏—è!\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${u.bank.euro} üí∂ –ï–≤—Ä–æ`
        bot.answerCallbackQuery(queryId, error, true)
    }
    })
}).catch((e) => console.log(e))
}

function changeName(chatId) {
    User.findOne({_id: chatId}).then(u => {
        if (u.nameFarm == '')
            nameFlag = true
        else nameFlag = false
    })
    bot.once('message', msg => {
        if (msg.text == kb.cancel)
            sendHTML(chatId, texts.townHall, 'townHall')
        name = msg.text
        const error = `‚õîÔ∏è'<b>${name}</b>' - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu`
        if (name.length >= 4 && name.length <= 20) {
            if (name.search(/[–ê-—è-–Å-—ë]/) === -1) {
            const {message_id} = msg
            const text = `‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–∞ <b>'${name}'</b>?`
            sendHTML(chatId, text, 'yesno')
            }
            else {
                sendHTML(chatId, error)
                changeName(chatId)
            }
        }
        else {
            sendHTML(chatId, error)
            changeName(chatId)
        }
    })
}
function getStat(Id) {
    User.findOne({_id: Id}).then(u => {
        Gen.findOne({_id: 1}).then(g => {
            
        const days = Math.floor((new Date() - u.registerDate.getTime()) / (1000*60*60*24))
        let percent 
        
        if (u.landlord == null) {
            percent = 100
        }
        else {
            percent = 70
        }
        
        const producPlants = (u.plants.apple + u.plants.tomato) * (g.produces.one / 2) + (u.plants.pear + u.plants.eggplant) * (g.produces.two / 2) + (u.plants.grapes + u.plants.carrots) * (g.produces.three / 2) + (u.plants.strawberries + u.plants.corn) * (g.produces.four / 2) + (u.plants.cherries + u.plants.pepper) * (g.produces.five / 2) + (u.plants.peach + u.plants.potatoes) * (g.produces.six / 2)
              
        const producProd = u.buildings.chicken * g.produces.one + u.buildings.pig * g.produces.two + u.buildings.sheepdog * g.produces.three + u.buildings.cowshed * g.produces.four + u.buildings.hive * g.produces.five + u.buildings.turkey * g.produces.six
            
        console.log(producPlants)
        
        const text = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏</b>\n
üìù –ù–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:\n<b>'${u.nameFarm}'</b>

üìÖ –í–æ–∑—Ä–∞—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–Ω–µ–π):\n<b>${days}</b>

–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –í–∞—à–∞ —Ñ–µ—Ä–º–∞ –≤—ã—Ä–∞—â–∏–≤–∞–µ—Ç:
<b>${producPlants}</b> üå± –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —á–∞—Å
<b>${producProd}</b> ü•ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —á–∞—Å
 
üå± –í—Å–µ–≥–æ –≤—ã—Ä–æ—Å–ª–æ –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n<b>${u.total.plants}</b>

ü•ö –í—Å–µ–≥–æ –±—ã–ª–æ —Å–æ–±—Ä–∞–Ω–æ –ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤:\n<b>${u.total.products}</b>

üë§ –ö–æ–º–ø–∞–Ω–∏–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—à–∏—Ö—Å—è –ø–æ –í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ:\n<b>${u.referals.lenght}</b>

‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:\n<b>${u.successTasks}</b>

üìë –î–æ–ª—è –í–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∞—è –í–∞–º:\n<b>${percent}%</b>`
        
        sendHTML(Id, text)
        
        })
    })
}

function getBonus(chatId, time) {
    
    const dollars = getRand(10, 101)
    const euro = getRand(10, 81)
    
    const success = `üéÅ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å</b>\n‚ûï –í–∞–º –∑–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å:\n<b>${dollars}</b> üíµ –î–æ–ª–ª–∞—Ä–æ–≤\n<b>${euro}</b> üí∂ –ï–≤—Ä–æ`
    
    const iso = new Date(time * 1000)
    
    User.updateOne({_id: chatId}, {
        $set: {
            "lastBonus": iso
        },
        $inc: {
            "bank.dollars": dollars,
            "bank.euro": euro
        }
    })
    .catch(e => console.log(e))
    sendHTML(chatId, success)
}
function getRand(min, max) {
  return Math.floor(Math.random() * (max - min)) + min
}

function sendFruit(Id, qId, mId) {
    User.findOne({_id: Id}).then(u => {
            
            const collected = u.produced.apple + u.produced.pear + u.produced.grapes + u.produced.strawberries + u.produced.cherries + u.produced.peach
            
            
            if (collected != 0) {
                const eggs70 = Math.ceil(u.produced.apple * 0.7)
            const bacon70 = Math.ceil(u.produced.pear * 0.7)
            const wool70 = Math.ceil(u.produced.grapes * 0.7)
            const milk70 = Math.ceil(u.produced.strawberries * 0.7)
            const honey70 = Math.ceil(u.produced.cherries * 0.7)
            const leg70 = Math.ceil(u.produced.peach * 0.7)
            
            const eggs = u.produced.apple
            const bacon = u.produced.pear
            const wool = u.produced.grapes
            const milk = u.produced.strawberries
            const honey = u.produced.cherries
            const leg = u.produced.peach
            
            const eggs30 = Math.ceil(u.produced.apple - eggs70)
            const bacon30 = Math.ceil(u.produced.pear - bacon70)
            const wool30 = Math.ceil(u.produced.grapes - wool70)
            const milk30 = Math.ceil(u.produced.strawberries - milk70)
            const honey30 = Math.ceil(u.produced.cherries - honey70)
            const leg30 = Math.ceil(u.produced.peach - leg70)
            
            const per70 = Math.ceil(collected * 0.7)
            const per30 = Math.ceil(collected - per70)
            
            if (u.landlord == null) {
                User.updateOne({_id: Id}, { $inc: {
                "warehouse.fruit.apple": eggs70,
                "warehouse.fruit.pear": bacon70,
                "warehouse.fruit.grapes": wool70,
                "warehouse.fruit.strawberries": milk70,
                "warehouse.fruit.cherries": honey70,
                "warehouse.fruit.peach": leg70,
                "produced.apple": -eggs,
                "produced.pear": -bacon,
                "produced.grapes": -wool,
                "produced.strawberries": -milk,
                "produced.cherries": -honey,
                "produced.peach": -leg 
                
            } }).catch((e) => console.log(e))
            
            const wh = u.warehouse.fruit.apple + u.warehouse.fruit.pear + u.warehouse.fruit.grapes + u.warehouse.fruit.strawberries + u.warehouse.fruit.cherries + u.warehouse.fruit.peach
                
            const text = `<b>–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤</b>
   
‚ûï –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ <b>${collected}</b> üçé –§—Ä—É–∫—Ç–æ–≤ –∏ –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.

üì¶ –í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>${wh + collected}</b> üçé –§—Ä—É–∫—Ç–æ–≤.`
            
            editText(text, Id, mId, 'back_f')
                
            }
            else {
            User.updateOne({_id: Id}, { $inc: {
                "warehouse.fruit.apple": eggs70,
                "warehouse.fruit.pear": bacon70,
                "warehouse.fruit.grapes": wool70,
                "warehouse.fruit.strawberries": milk70,
                "warehouse.fruit.cherries": honey70,
                "warehouse.fruit.peach": leg70,
                "produced.apple": -eggs,
                "produced.pear": -bacon,
                "produced.grapes": -wool,
                "produced.strawberries": -milk,
                "produced.cherries": -honey,
                "produced.peach": -leg 
                
            } }).catch((e) => console.log(e))
            
            const ll = u.landlord
            User.updateOne({_id: ll}, { $inc: {
            "warehouse.fruit.apple": eggs30,
            "warehouse.fruit.pear": bacon30,
            "warehouse.fruit.grapes": wool30,
            "warehouse.fruit.strawberries": milk30,
            "warehouse.fruit.cherries": honey30,
            "warehouse.fruit.peach": leg30
            } }).catch((e) => console.log(e))

            User.findOne({_id: ll}).then(us => {
                const text = `üöö –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${per30}</b> üçé —Ñ—Ä—É–∫—Ç–æ–≤ –æ—Ç —Ñ–µ—Ä–º—ã 
<b>'${u.nameFarm}'</b>, –∫–æ—Ç–æ—Ä–æ–π –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ –Ω–∞ 30%.
–†–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –Ω–∞ üì¶ —Å–∫–ª–∞–¥`

                sendHTML(ll, text)
            })
            
            const wh = u.warehouse.fruit.apple + u.warehouse.fruit.pear + u.warehouse.fruit.grapes + u.warehouse.fruit.strawberries + u.warehouse.fruit.cherries + u.warehouse.fruit.peach
                
            const text = `<b>–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤</b>
   
‚ûï –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ <b>${collected}</b> üçé –§—Ä—É–∫—Ç–æ–≤, <b>${per70}</b> –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.

üì¶ –í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>${wh + per70}</b> üçé –§—Ä—É–∫—Ç–æ–≤.
üöö –í–∞—à –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª: <b>${per30}</b> –§—Ä—É–∫—Ç–æ–≤.`
            
            editText(text, Id, mId, 'back_f')
            }
            }
            else {
                
                const error = `–£ –í–∞—Å –Ω–µ—Ç —Ñ—Ä—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–±—Ä–∞—Ç—å.`
                
                bot.answerCallbackQuery(qId, error, true)
                
            }
        })
}
function sendVegetables(Id, qId, mId) {
    User.findOne({_id: Id}).then(u => {
        
            const collected = u.produced.tomato + u.produced.eggplant + u.produced.carrots + u.produced.corn + u.produced.pepper + u.produced.potatoes
            
            
            if (collected != 0) {
                const eggs70 = Math.ceil(u.produced.tomato * 0.7)
            const bacon70 = Math.ceil(u.produced.eggplant * 0.7)
            const wool70 = Math.ceil(u.produced.carrots * 0.7)
            const milk70 = Math.ceil(u.produced.corn * 0.7)
            const honey70 = Math.ceil(u.produced.pepper * 0.7)
            const leg70 = Math.ceil(u.produced.potatoes * 0.7)
            
            const eggs = u.produced.tomato
            const bacon = u.produced.eggplant
            const wool = u.produced.carrots
            const milk = u.produced.corn
            const honey = u.produced.pepper
            const leg = u.produced.potatoes
            
            const eggs30 = Math.ceil(u.produced.tomato - eggs70)
            const bacon30 = Math.ceil(u.produced.eggplant - bacon70)
            const wool30 = Math.ceil(u.produced.carrots - wool70)
            const milk30 = Math.ceil(u.produced.corn - milk70)
            const honey30 = Math.ceil(u.produced.pepper - honey70)
            const leg30 = Math.ceil(u.produced.potatoes - leg70)
            
            const per70 = Math.ceil(collected * 0.7)
            const per30 = Math.ceil(collected - per70)
            
            if (u.landlord == null) {
            User.updateOne({_id: Id}, { $inc: {
                "warehouse.vegetables.tomato": eggs,
                "warehouse.vegetables.eggplant": bacon,
                "warehouse.vegetables.carrots": wool,
                "warehouse.vegetables.corn": milk,
                "warehouse.vegetables.pepper": honey,
                "warehouse.vegetables.potatoes": leg,
                "produced.tomato": -eggs,
                "produced.eggplant": -bacon,
                "produced.carrots": -wool,
                "produced.corn": -milk,
                "produced.pepper": -honey,
                "produced.potatoes": -leg 
                
            } }).catch((e) => console.log(e))
                
            const wh = u.warehouse.vegetables.tomato + u.warehouse.vegetables.eggplant + u.warehouse.vegetables.carrots + u.warehouse.vegetables.corn + u.warehouse.vegetables.pepper + u.warehouse.vegetables.potatoes
                
            const text = `<b>–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n
‚ûï –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ <b>${collected}</b> üåΩ –û–≤–æ—â–µ–π –∏ –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.

üì¶ –í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>${wh + collected}</b> üåΩ –û–≤–æ—â–µ–π.`
            
            editText(text, Id, mId, 'back_v')
                
            }
            else {
            User.updateOne({_id: Id}, { $inc: {
                "warehouse.vegetables.tomato": eggs70,
                "warehouse.vegetables.eggplant": bacon70,
                "warehouse.vegetables.carrots": wool70,
                "warehouse.vegetables.corn": milk70,
                "warehouse.vegetables.pepper": honey70,
                "warehouse.vegetables.potatoes": leg70,
                "produced.tomato": -eggs,
                "produced.eggplant": -bacon,
                "produced.carrots": -wool,
                "produced.corn": -milk,
                "produced.pepper": -honey,
                "produced.potatoes": -leg 
                
            } }).catch((e) => console.log(e))
            
            const ll = u.landlord
            
            User.updateOne({_id: ll}, { $inc: {
            "warehouse.vegetables.tomato": eggs30,
            "warehouse.vegetables.eggplant": bacon30,
            "warehouse.vegetables.carrots": wool30,
            "warehouse.vegetables.corn": milk30,
            "warehouse.vegetables.pepper": honey30,
            "warehouse.vegetables.potatoes": leg30
            } }).catch((e) => console.log(e))

            User.findOne({_id: ll}).then(us => {
                const text = `üöö –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${per30}</b> üåΩ –æ–≤–æ—â–µ–π –æ—Ç —Ñ–µ—Ä–º—ã 
<b>'${u.nameFarm}'</b>, –∫–æ—Ç–æ—Ä–æ–π –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ –Ω–∞ 30%.
–†–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –Ω–∞ üì¶ —Å–∫–ª–∞–¥`

                sendHTML(ll, text)
                })
            
            const wh = u.warehouse.vegetables.tomato + u.warehouse.vegetables.eggplant + u.warehouse.vegetables.carrots + u.warehouse.vegetables.corn + u.warehouse.vegetables.pepper + u.warehouse.vegetables.potatoes
            
            const text = `<b>–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n
‚ûï –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ <b>${collected}</b> üåΩ –û–≤–æ—â–µ–π, <b>${per70}</b> –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.

üì¶ –í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>${wh + per70}</b> üåΩ –û–≤–æ—â–µ–π.
üöö –í–∞—à –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª: <b>${per30}</b> –û–≤–æ—â–µ–π.`
            editText(text, Id, mId, 'back_v')
            }
            }
            else {
                
                const error = `–£ –í–∞—Å –Ω–µ—Ç –æ–≤–æ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–±—Ä–∞—Ç—å.`
                
                bot.answerCallbackQuery(qId, error, true)
                
            }
        })
}
function sendProducts(Id, qId) {
    User.findOne({_id: Id}).then(u => {
            const collected = u.produced.eggs + u.produced.bacon + u.produced.wool + u.produced.milk + u.produced.honey + u.produced.leg
            
            if (collected != 0) {
            const eggs70 = Math.ceil(u.produced.eggs * 0.7)
            const bacon70 = Math.ceil(u.produced.bacon * 0.7)
            const wool70 = Math.ceil(u.produced.wool * 0.7)
            const milk70 = Math.ceil(u.produced.milk * 0.7)
            const honey70 = Math.ceil(u.produced.honey * 0.7)
            const leg70 = Math.ceil(u.produced.leg * 0.7)
            
            const eggs = u.produced.eggs
            const bacon = u.produced.bacon
            const wool = u.produced.wool
            const milk = u.produced.milk
            const honey = u.produced.honey
            const leg = u.produced.leg
            
            const eggs30 = Math.ceil(u.produced.eggs - eggs70)
            const bacon30 = Math.ceil(u.produced.bacon - bacon70)
            const wool30 = Math.ceil(u.produced.wool - wool70)
            const milk30 = Math.ceil(u.produced.milk - milk70)
            const honey30 = Math.ceil(u.produced.honey - honey70)
            const leg30 = Math.ceil(u.produced.leg - leg70)
            
            const per70 = Math.ceil(collected * 0.7)
            const per30 = Math.ceil(collected - per70)
            
            if (u.landlord == null) {
            User.updateOne({_id: Id}, { $inc: {
                "warehouse.products.eggs": eggs,
                "warehouse.products.bacon": bacon,
                "warehouse.products.wool": wool,
                "warehouse.products.milk": milk,
                "warehouse.products.honey": honey,
                "warehouse.products.leg": leg,
                "produced.eggs": -eggs,
                "produced.bacon": -bacon,
                "produced.wool": -wool,
                "produced.milk": -milk,
                "produced.honey": -honey,
                "produced.leg": -leg 
            } }).catch((e) => console.log(e))
                
            const wh = u.warehouse.products.eggs + u.warehouse.products.bacon + u.warehouse.products.wool + u.warehouse.products.milk + u.warehouse.products.honey + u.warehouse.products.leg  
            const text = `<b>–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n
‚ûï –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ <b>${collected}</b> ü•ö –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –æ–Ω–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.\n
üì¶ –í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>${wh + collected}</b> ü•ö –ü—Ä–æ–¥—É–∫—Ç–æ–≤.`
            sendHTML(Id, text)
            }
            else {
            User.updateOne({_id: Id}, { $inc: {
                "warehouse.products.eggs": eggs70,
                "warehouse.products.bacon": bacon70,
                "warehouse.products.wool": wool70,
                "warehouse.products.milk": milk70,
                "warehouse.products.honey": honey70,
                "warehouse.products.leg": leg70,
                "produced.eggs": -eggs,
                "produced.bacon": -bacon,
                "produced.wool": -wool,
                "produced.milk": -milk,
                "produced.honey": -honey,
                "produced.leg": -leg 
                
            } }).catch((e) => console.log(e))
                
            const ll = u.landlord
            
            User.updateOne({_id: ll}, { $inc: {
            "warehouse.products.eggs": eggs30,
            "warehouse.products.bacon": bacon30,
            "warehouse.products.wool": wool30,
            "warehouse.products.milk": milk30,
            "warehouse.products.honey": honey30,
            "warehouse.products.leg": leg30
            } }).catch((e) => console.log(e))

            User.findOne({_id: ll}).then(us => {
                const text = `üöö –í—ã –ø–æ–ª—É—á–∏–ª–∏ <b>${per30}</b> ü•ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –æ—Ç —Ñ–µ—Ä–º—ã 
<b>'${u.nameFarm}'</b>, –∫–æ—Ç–æ—Ä–æ–π –í—ã –≤–ª–∞–¥–µ–µ—Ç–µ –Ω–∞ 30%.
–†–µ—Å—É—Ä—Å—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω—ã –Ω–∞ üì¶ —Å–∫–ª–∞–¥`

                sendHTML(ll, text)
            })
            
            const wh = u.warehouse.products.eggs + u.warehouse.products.bacon + u.warehouse.products.wool + u.warehouse.products.milk + u.warehouse.products.honey + u.warehouse.products.leg
            
            const text = `<b>–°–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤</b>\n
‚ûï –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–ª–∏ <b>${collected}</b> ü•ö –ü—Ä–æ–¥—É–∫—Ç–æ–≤, <b>${per70}</b> –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∫–ª–∞–¥.\n
üì¶ –í—Å–µ–≥–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: <b>${wh + per70}</b> ü•ö –ü—Ä–æ–¥—É–∫—Ç–æ–≤.
üöö –í–∞—à –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª: <b>${per30}</b> –ü—Ä–æ–¥—É–∫—Ç–æ–≤.`
            sendHTML(Id, text)
            }
            }
            else {
                const error = `–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–±—Ä–∞—Ç—å.`
                bot.answerCallbackQuery(qId, error, true)
            }
        })
}

function sell(Id, qId, plants = true) {
    const price = 2
    const price2 = 1
    User.findOne({_id: Id}).then(u => {
        let rounded, delta
        if (plants) {
            const apple = u.warehouse.fruit.apple
            const pear = u.warehouse.fruit.pear
            const grapes = u.warehouse.fruit.grapes
            const strawberries = u.warehouse.fruit.strawberries
            const cherries = u.warehouse.fruit.cherries
            const peach = u.warehouse.fruit.peach
            const tomato = u.warehouse.vegetables.tomato
            const eggplant = u.warehouse.vegetables.eggplant
            const carrots = u.warehouse.vegetables.carrots
            const corn = u.warehouse.vegetables.corn
            const pepper = u.warehouse.vegetables.pepper
            const potatoes = u.warehouse.vegetables.potatoes
            
            const plants = apple + pear + grapes + strawberries + cherries + peach + tomato + eggplant + carrots + corn + pepper + potatoes
            
            rounded = Math.floor(plants / 500)
            delta = plants - (Math.floor(plants / 500) * 500)
            
            if (rounded >= 1) {
                
            if (!sellFlag) {
                sellFlag = true
            }    
                
            const appleRound = round(apple)
            const pearRound = round(pear)
            const grapesRound = round(grapes)
            const strawberriesRound = round(strawberries)
            const cherriesRound = round(cherries)
            const peachRound = round(peach)
            const tomatoRound = round(tomato)
            const eggplantRound = round(eggplant)
            const carrotsRound = round(carrots)
            const cornRound = round(corn)
            const pepperRound = round(pepper)
            const potatoesRound = round(potatoes)
            
            User.updateOne({_id: Id}, { $inc: {
                "bank.dollars": price * rounded,
                "bank.gold": price2,
                "warehouse.fruit.apple": -appleRound,
                "warehouse.fruit.pear": -pearRound,
                "warehouse.fruit.grapes": -grapesRound,
                "warehouse.fruit.strawberries": -strawberriesRound,
                "warehouse.fruit.cherries": -cherriesRound,
                "warehouse.fruit.peach": -peachRound,
                "warehouse.vegetables.tomato": -tomatoRound,
                "warehouse.vegetables.eggplant": -eggplantRound,
                "warehouse.vegetables.carrots": -carrotsRound,
                "warehouse.vegetables.corn": -cornRound,
                "warehouse.vegetables.pepper": -pepperRound,
                "warehouse.vegetables.potatoes": -potatoesRound
            }}).catch(e => console.log(e))
            
            const text = `üõí <b>–†—ã–Ω–æ–∫</b>\n\n–í—ã –ø—Ä–æ–¥–∞–ª–∏\n${plants - delta} üå± –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n–∑–∞ ${rounded * price} üíµ –î–æ–ª–ª–∞—Ä–æ–≤ –∏ ${price2} üí∞ Gold`
            
            sendHTML(Id, text)
            } else {
                const error = `üö´ –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ 500 üå± –†–∞—Å—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —É –í–∞—Å —Ç–æ–ª—å–∫–æ ${plants} üå± –ø—Ä–æ–¥—É–∫—Ç–æ–≤(–∞)`
                bot.answerCallbackQuery(qId, error, true)
            }
        }
        else {
            const eggs = u.warehouse.products.eggs
            const bacon = u.warehouse.products.bacon
            const wool = u.warehouse.products.wool
            const milk = u.warehouse.products.milk
            const honey = u.warehouse.products.honey
            const leg = u.warehouse.products.leg
            
            const products = eggs + bacon + wool + milk + honey + leg
            
            rounded = Math.floor(products / 500)
            delta = products - (Math.floor(products / 500) * 500)
            
            if (rounded >= 1) {
                
            const eggsRound = round(eggs)
            const baconRound = round(bacon)
            const woolRound = round(wool)
            const milkRound = round(milk)
            const honeyRound = round(honey)
            const legRound = round(leg)
            
            User.updateOne({_id: Id}, { $inc: {
                "bank.euro": price * rounded,
                "bank.diamond": price2,
                "warehouse.products.eggs": -eggsRound,
                "warehouse.products.bacon": -baconRound,
                "warehouse.products.wool": -woolRound,
                "warehouse.products.milk": -milkRound,
                "warehouse.products.honey": -honeyRound,
                "warehouse.products.leg": -legRound
            }}).catch(e => console.log(e))
            
            const text = `üõí <b>–†—ã–Ω–æ–∫</b>\n\n–í—ã –ø—Ä–æ–¥–∞–ª–∏\n${products - delta} ü•ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n–∑–∞ ${rounded * price} üí∂ –ï–≤—Ä–æ –∏ ${price2} üíé Diamond`
            
            sendHTML(Id, text)
            } else {
                const error = `üö´ –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ 500 ü•ö –ñ–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —É –í–∞—Å —Ç–æ–ª—å–∫–æ ${products} ü•ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤(–∞)`
                bot.answerCallbackQuery(qId, error, true)
            }
        }   
    })
}

function round(i) {
    let main
    let delta
    if (i < 1000) {
        main = Math.floor(i / 100)
        delta = i - (Math.floor(i / 100) * 100)
    }
    else if (i >= 1000) {
        main = Math.floor(i / 1000)
        delta = i - (Math.floor(i / 1000) * 1000)
    }
    return (i - delta)
}

function checkTask(Id, task, qId) {

    User.findOne({_id: Id}).then(u => {
        if (u.successTasks >= task) {
            console.log('–æ—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞')
            failureTask(qId)
        }
        else {
    switch (task) {
        case 1:
            if (u.nameFarm != '') {
                successTask(Id, 100)
            }
        break
        case 2:
            if (u.plants.apple >= 1 && u.plants.tomato >= 1) {
                successTask(Id, 0, 25)
            }
        break
        case 3:
            if (u.warehouse.fruit.apple >= 6 && u.warehouse.vegetables.tomato >= 6) {
                successTask(Id, 0, 25)
            }
        break
        case 4:
            if (sellFlag) {
                successTask(Id, 0, 50)
            }
        break
        case 5:
            if (u.buildings.chicken >= 1) {
                successTask(Id, 50, 30)
            }
        break
        case 6:
            if (u.warehouse.products.eggs >= 16) {
                successTask(Id, 40, 40)
            }
        break
        case 7:
            if (u.referals.lenght >= 4) {
                successTask(Id, 125, 75)
            }
        break
        default: 
        failureTask(qId) 
    }
        }
    })
}
function successTask(Id, dollars = 0, euro = 0) {
    
    User.updateOne({_id: Id}, { $inc: {
            "bank.dollars": dollars,
            "bank.euro": euro,
            "successTasks": 1
        } 
    })
        .catch((e) => console.log(e))
    
    if (euro == 0 && dollars != 0) {
        const success = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n
üèÜ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:  ${dollars} üíµ –î–æ–ª–ª–∞—Ä–æ–≤`
        sendHTML(Id, success)
    } 
    if (dollars == 0 && euro != 0) {
        const success = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n
üèÜ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:  ${euro} üí∂ –ï–≤—Ä–æ`
        sendHTML(Id, success)
    } 
    else if (dollars != 0 && euro != 0) {
        const success = `‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n
üèÜ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞:  ${dollars} üíµ –î–æ–ª–ª–∞—Ä–æ–≤ –∏ ${euro} üí∂ –ï–≤—Ä–æ`
        sendHTML(Id, success)
    }
}
function failureTask(qId) {
    bot.answerCallbackQuery(qId, texts.tasks.failureTask, true)
}

function redeem(Id, qId) {
    
    User.findOne({_id: Id}).then(u => {
        
        if (u.landlord == null) {
            const error = `üö´ –£ –≤–∞—Å –Ω–µ—Ç –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å —Å–≤–æ–π —É—á–∞—Å—Ç–æ–∫.`
            bot.answerCallbackQuery(qId, error, true)
        } else {
            const ll = u.landlord
            if (u.bank.points >= 20) {
                
                User.updateOne({_id: Id}, { $inc: {
                    "bank.points": -20
                }, 
                $set: {
                    "landlord": null
                }
                }).catch((e) => console.log(e))
                
                User.updateOne({_id: ll}, { 
                $inc: {
                    "bank.points": 20
                }
                }).catch((e) => console.log(e))
                
                const success = `–í—ã –≤—ã–∫—É–ø–∏–ª–∏ —É—á–∞—Å—Ç–æ–∫`
                sendHTML(Id, success)
                
            }
            else {
                const error = `üö´ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚öúÔ∏è –ë–∞–ª–ª–æ–≤ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤—ã–∫—É–ø–∏—Ç—å —Å–≤–æ–π —É—á–∞—Å—Ç–æ–∫.`
                bot.answerCallbackQuery(qId, error, true)
            }
        }
        
    })
    
}

function deposit(chatId, qId) {
    bot.once('message', msg => {
        
        if (msg.text == kb.cancel_dep) {
            return
        }
        
        dep = msg.text
        
        const error = `‚õîÔ∏è ${dep} - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥—É—é —Å—É–º–º—É.\n–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu`
        
        if (dep >= 300) {
            if (+dep != NaN) {
                console.log('–æ–ø–ª–∞—Ç–∞')
                bot.sendInvoice( 
                    chatId,
                    `${dep} üíµ –î–æ–ª–ª–∞—Ä–æ–≤`,
                    `–ü–æ–ª—É—á–∏—Ç–µ –Ω–∞ –≤–∞—à —Å—á–µ—Ç ${dep} üíµ –î–æ–ª–ª–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ—Ä—É–∫—Ç–æ–≤ –∏ –æ–≤–æ—â–µ–π.`,
                    'payload',
                    PAYMENT_WALL_TEST,
//                    CLICK_TEST,
//                    PAYCOM_TEST,
                    'SOME_RANDOM_STRING_KEY',
                    'USD',
                    [
                        {
                            label: `dollars${dep}`,
                            amount: dep
                        }
                    ],
                    {
                        need_name: false,
                        need_shipping_address: false,
                        need_email: true,
                        need_phone_number: false,
                        is_flexible: false,
                        send_email_to_provider: true
                    }
                ).then((inv) => {
                    console.log(inv)
                })
            }
            else {
                bot.answerCallbackQuery(qId, error, true)
                deposit(chatId, qId)
            }
        }
        else {
            bot.answerCallbackQuery(qId, error, true)
            deposit(chatId, qId)
        }
    })
}

// function setLang(lang) {
//     switch (lang) {
//     case 'ru':
//         texts = require('./texts-ru')    
//     break
//     case 'en':
//         texts = require('./texts-en')    
//     break
//     case 'de':
//         texts = require('./texts-de')    
//     break
//     case 'fr':
//         texts = require('./texts-fr')    
//     break
//     case 'es':
//         texts = require('./texts-es')    
//     break
//     case 'pt':
//         texts = require('./texts-pt')    
//     break
//     default: kb = require('./texts-ru')  
//     }
// }
